/**
 * @fileoverview ARIA Analysis Engine for accessibility snapshot display and analysis
 * 
 * This module provides comprehensive ARIA analysis capabilities including
 * snapshot display in new browser windows, accessibility compliance analysis,
 * and export functionality for ARIA data.
 * 
 * The engine takes ARIA snapshots generated by AriaLocatorGenerator and
 * provides user-friendly display and analysis features.
 * 
 * Requirements Coverage:
 * - Requirement 4.3: ARIA snapshot generation option in ARIA tab
 * - Requirement 4.4: ARIA snapshot display in new browser window/tab
 * 
 * @author LocateFlow Development Team
 * @version 1.0.0
 */

import { AriaSnapshot } from './aria-locator-generator';

// ============================================================================
// INTERFACES
// ============================================================================

/**
 * Accessibility analysis result with issues and recommendations
 */
export interface AccessibilityAnalysis {
    score: number; // 0-100
    issues: string[];
    recommendations: string[];
    compliance: 'excellent' | 'good' | 'fair' | 'poor';
}

// ============================================================================
// ARIA ANALYSIS ENGINE CLASS
// ============================================================================

/**
 * Engine for ARIA accessibility analysis and snapshot display
 */
export class AriaAnalysisEngine {

    /**
     * Displays ARIA snapshot in a new browser window
     * @param snapshot - The ARIA snapshot to display
     * @throws Error if snapshot is null or content cannot be written
     */
    displaySnapshotInNewWindow(snapshot: AriaSnapshot): void {
        if (!snapshot) {
            throw new Error('Snapshot cannot be null');
        }

        // Open new window with specific dimensions and features
        const newWindow = window.open(
            '',
            'aria-snapshot',
            'width=800,height=600,scrollbars=yes,resizable=yes'
        );

        if (!newWindow) {
            // Provide user-friendly feedback instead of throwing error
            this.showPopupBlockerNotification();
            return;
        }

        try {
            // Generate HTML content for the snapshot
            const htmlContent = this.generateSnapshotHTML(snapshot);

            // Write content to new window
            newWindow.document.write(htmlContent);
            newWindow.document.close();
            newWindow.focus();
        } catch (error) {
            newWindow.close();
            throw new Error('Failed to write content to new window');
        }
    }

    /**
     * Generates HTML content for ARIA snapshot display
     * @param snapshot - The ARIA snapshot to format
     * @returns HTML string for display
     */
    generateSnapshotHTML(snapshot: AriaSnapshot): string {
        if (!snapshot || !snapshot.element) {
            return this.generateErrorHTML('Invalid snapshot data');
        }

        const title = `ARIA Accessibility Snapshot - ${snapshot.element}`;
        const css = this.generateCSS();
        const content = this.generateContentHTML(snapshot);

        return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    ${css}
</head>
<body>
    <div class="container">
        <h1>ARIA Accessibility Snapshot</h1>
        ${content}
    </div>
    ${this.generateExportScript(snapshot)}
</body>
</html>`;
    }

    /**
     * Analyzes accessibility compliance of ARIA snapshot
     * @param snapshot - The ARIA snapshot to analyze
     * @returns Accessibility analysis with score and recommendations
     */
    analyzeAccessibility(snapshot: AriaSnapshot): AccessibilityAnalysis {
        const issues: string[] = [];
        const recommendations: string[] = [];
        let score = 100;

        // Check for accessible name
        if (!snapshot.accessibleName || snapshot.accessibleName.trim() === '') {
            issues.push('Missing accessible name');
            recommendations.push('Add aria-label');
            score -= 30;
        }

        // Check for required field without aria-required
        if (snapshot.states.includes('required') &&
            !snapshot.ariaAttributes['aria-required']) {
            issues.push('Required field without aria-required');
            recommendations.push('Add aria-required="true"');
            score -= 20;
        }

        // Check role hierarchy consistency
        if (snapshot.role === 'listitem' &&
            !snapshot.hierarchy.includes('list')) {
            issues.push('Listitem not contained in list');
            recommendations.push('Ensure proper list structure');
            score -= 25;
        }

        // Determine compliance level
        let compliance: AccessibilityAnalysis['compliance'];
        if (score >= 90) compliance = 'excellent';
        else if (score >= 70) compliance = 'good';
        else if (score >= 50) compliance = 'fair';
        else compliance = 'poor';

        // Add positive feedback for well-formed elements
        if (issues.length === 0) {
            recommendations.push('Well-formed');
        }

        return {
            score: Math.max(0, score),
            issues,
            recommendations,
            compliance
        };
    }

    /**
     * Exports ARIA snapshot as JSON string
     * @param snapshot - The ARIA snapshot to export
     * @returns JSON string representation
     */
    exportSnapshotAsJSON(snapshot: AriaSnapshot): string {
        return JSON.stringify(snapshot, null, 2);
    }

    /**
     * Exports ARIA snapshot as CSV string
     * @param snapshot - The ARIA snapshot to export
     * @returns CSV string representation
     */
    exportSnapshotAsCSV(snapshot: AriaSnapshot): string {
        const lines = ['Attribute,Value'];

        // Add ARIA attributes
        for (const [key, value] of Object.entries(snapshot.ariaAttributes)) {
            lines.push(`${this.escapeCsvValue(key)},${this.escapeCsvValue(value)}`);
        }

        // Add other properties
        lines.push(`element,${this.escapeCsvValue(snapshot.element)}`);
        lines.push(`accessibleName,${this.escapeCsvValue(snapshot.accessibleName)}`);
        lines.push(`role,${this.escapeCsvValue(snapshot.role)}`);

        return lines.join('\n');
    }

    // ========================================================================
    // PRIVATE HELPER METHODS
    // ========================================================================

    /**
     * Escapes CSV values that contain special characters
     * @param value - The value to escape
     * @returns Properly escaped CSV value
     */
    private escapeCsvValue(value: string): string {
        if (!value) return '';

        // Check if value contains special characters that require escaping
        if (value.includes(',') || value.includes('"') || value.includes('\n') || value.includes('\r')) {
            // Escape internal quotes by doubling them
            const escapedValue = value.replace(/"/g, '""');
            // Wrap in quotes
            return `"${escapedValue}"`;
        }

        return value;
    }

    /**
     * Escapes HTML special characters to prevent XSS
     * @param text - The text to escape
     * @returns HTML-escaped text
     */
    private escapeHtml(text: string): string {
        if (!text) return '';

        return text
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#x27;');
    }

    /**
     * Shows user-friendly notification when popup is blocked
     */
    private showPopupBlockerNotification(): void {
        // Use alert as a fallback - in a real implementation, this could be a toast notification
        alert('Unable to open ARIA snapshot window. Please check if your browser is blocking popups and allow them for this site to view the accessibility snapshot.');
    }

    /**
     * Generates CSS styles for the snapshot display
     */
    private generateCSS(): string {
        return `
<style>
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        line-height: 1.6;
        margin: 0;
        padding: 20px;
        background-color: #f5f5f5;
    }
    .container {
        max-width: 800px;
        margin: 0 auto;
        background: white;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    h1 {
        color: #333;
        border-bottom: 2px solid #007acc;
        padding-bottom: 10px;
    }
    h2 {
        color: #555;
        margin-top: 30px;
    }
    table {
        width: 100%;
        border-collapse: collapse;
        margin: 15px 0;
    }
    th, td {
        border: 1px solid #ddd;
        padding: 12px;
        text-align: left;
    }
    th {
        background-color: #f8f9fa;
        font-weight: 600;
    }
    .export-buttons {
        margin: 20px 0;
        text-align: center;
    }
    .export-btn {
        background: #007acc;
        color: white;
        border: none;
        padding: 10px 20px;
        margin: 0 10px;
        border-radius: 4px;
        cursor: pointer;
    }
    .export-btn:hover {
        background: #005a9e;
    }
    .no-data {
        color: #666;
        font-style: italic;
    }
    .hierarchy {
        font-family: monospace;
        background: #f8f9fa;
        padding: 10px;
        border-radius: 4px;
    }
</style>`;
    }

    /**
     * Generates main content HTML for snapshot
     */
    private generateContentHTML(snapshot: AriaSnapshot): string {
        const ariaTable = this.generateAriaAttributesTable(snapshot.ariaAttributes);
        const hierarchy = snapshot.hierarchy.length > 0
            ? snapshot.hierarchy.join(' â†’ ')
            : 'No hierarchy';

        return `
        <h2>Element Information</h2>
        <table>
            <tr><th>Property</th><th>Value</th></tr>
            <tr><td>Element</td><td>${snapshot.element}</td></tr>
            <tr><td>Role</td><td>${snapshot.role}</td></tr>
            <tr><td>Accessible Name</td><td>${snapshot.accessibleName || '<span class="no-data">No accessible name</span>'}</td></tr>
            <tr><td>Accessible Description</td><td>${snapshot.accessibleDescription || '<span class="no-data">No description</span>'}</td></tr>
            <tr><td>States</td><td>${snapshot.states.length > 0 ? snapshot.states.join(', ') : '<span class="no-data">No states</span>'}</td></tr>
        </table>

        <h2>ARIA Attributes</h2>
        ${ariaTable}

        <h2>Role Hierarchy</h2>
        <div class="hierarchy">${hierarchy}</div>

        <div class="export-buttons">
            <button class="export-btn" onclick="exportAsJSON()">Export as JSON</button>
            <button class="export-btn" onclick="exportAsCSV()">Export as CSV</button>
        </div>
    `;
    }

    /**
     * Generates HTML table for ARIA attributes
     */
    private generateAriaAttributesTable(attributes: Record<string, string>): string {
        if (Object.keys(attributes).length === 0) {
            return '<p class="no-data">No ARIA attributes found</p>';
        }

        const rows = Object.entries(attributes)
            .map(([key, value]) => `<tr><td>${key}</td><td>${value}</td></tr>`)
            .join('');

        return `
        <table>
            <tr><th>Attribute</th><th>Value</th></tr>
            ${rows}
        </table>
    `;
    }

    /**
     * Generates JavaScript for export functionality
     */
    private generateExportScript(snapshot: AriaSnapshot): string {
        const jsonData = this.exportSnapshotAsJSON(snapshot);
        const csvData = this.exportSnapshotAsCSV(snapshot);

        return `
<script type="application/json" id="aria-json-data">${this.escapeHtml(jsonData)}</script>
<script type="text/csv" id="aria-csv-data">${this.escapeHtml(csvData)}</script>
<script>
    function exportAsJSON() {
        const dataElement = document.getElementById('aria-json-data');
        const data = dataElement ? dataElement.textContent : '';
        downloadFile(data, 'aria-snapshot.json', 'application/json');
    }
    
    function exportAsCSV() {
        const dataElement = document.getElementById('aria-csv-data');
        const data = dataElement ? dataElement.textContent : '';
        downloadFile(data, 'aria-snapshot.csv', 'text/csv');
    }
    
    function downloadFile(content, filename, contentType) {
        const blob = new Blob([content], { type: contentType });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
</script>`;
    }

    /**
     * Generates error HTML for invalid data
     */
    private generateErrorHTML(message: string): string {
        return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>ARIA Snapshot Error</title>
    ${this.generateCSS()}
</head>
<body>
    <div class="container">
        <h1>Error</h1>
        <p>${message}</p>
    </div>
</body>
</html>`;
    }
}